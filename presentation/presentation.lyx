#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\renewcommand{\arraystretch}{1.5}
\usepackage{tocloft}
\usepackage{layouts}

\renewcommand{\cftpartleader}{\cftdotfill{\cftdotsep}}

\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhead{}
\fancyfoot{}
\renewcommand{\headrulewidth}{0pt} 

\hypersetup{colorlinks=true,citecolor=blue,linkcolor= blue}

\renewcommand\thesection{\arabic{section}}

\usepackage{titlesec}




\makeatletter
\@addtoreset{footnote}{section}
\makeatother 

\titleformat{\part}
  {\normalfont\Large\bfseries}{\thepart}{2em}{}



\usepackage{graphicx}


\usepackage{picinpar}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_numerical
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\boxbgcolor #e0e3e6
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
\size huge
Présentation du projet d'informatique : flyingTurtles
\end_layout

\begin_layout Author

\noun on
M.
 Boutserin, R.
 Deyres, M.
 Léger
\end_layout

\begin_layout Date
6 décembre 2015
\end_layout

\begin_layout Abstract
Lors de ce projet nous allons développer un jeu en C++ basé sur le jeu Angry
 Birds, il sera nommé flyingTurtles.
 Ce jeu se base sur la mécanique car assimilé à un lancer de balle sans
 frottements dans un premier temps puis avec des effets tels que les intempéries
 et donc des frottements et éventuellement des masses variables selon les
 tortues (à voir).
 Le but sera donc en un nombre de lancers limités de détruire les ennemis
 qui se trouveront face aux tortues.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setcounter{page}{1}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fancyhead{} 
\end_layout

\begin_layout Plain Layout


\backslash
fancyhead[LE,RO]{
\backslash
textit{Projet d'informatique - M.
 Boutserin, R.
 Deyres, M.
 Léger - L3 Physique INF353 2015/2016}}
\end_layout

\begin_layout Plain Layout


\backslash
fancyfoot[CO]{
\backslash
leftmark}
\end_layout

\begin_layout Plain Layout


\backslash
fancyfoot[LE,RO]{
\backslash
thepage}
\end_layout

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Part
Présentation du jeu
\end_layout

\begin_layout Standard
FlyingTurtles est un jeu basé sur le même principe qu'Angry Birds avec les
 mêmes bases physique.
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/AngryBirds.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Exemple d'un niveau d'Angry Birds
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

On se base sur le lancée d'une balle pour détruire un ennemi généré aléatoiremen
t avec du vent et un sol différent pour chaque partie afin de durcir le
 jeu.
\end_layout

\begin_layout Part
Simulation du lancé d'une tortue
\end_layout

\begin_layout Standard
2.1) Lancé d'une tortue
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Itemize

\shape italic
\bar under
\color black
Cas d'un lancer sans frottements :
\bar default
 
\shape default
\color inherit
on considère les constantes m (la masse de la tortue) et la constante de
 gravité g=9,81m/s.
 Les conditions initiales sont entrées par l'utilisateur en cliquant avec
 la souris : v
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

 la vitesse initiale en m/s et 
\begin_inset Formula $\alpha$
\end_inset

 l'angle de lancer initial.
 
\end_layout

\begin_layout Standard
\align left
On a donc la situation initiale suivante : 
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/balleQuiBougeSansFrottements
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Conditions initiales d'un lancer de balle
\end_layout

\end_inset


\end_layout

\end_inset

Pour évaluer la trajectoire de la tortue, nous simulons sa course en utilisant
 la méthode d'Euler et le principe fondamental de la dynamique : 
\end_layout

\begin_layout Standard
\align left
1) On connaît la position et la vitesse de la tortue à l'instant présent
 (les conditions initiales sont déterminé par le jeu et l'utilisateur à
 l'instant 
\begin_inset Formula $t{}_{0}$
\end_inset

 et par le simulateur ensuite).
 
\end_layout

\begin_layout Standard
\align left
2) On applique le PFD dans cette situation pour connaître l'accélération
 de la tortue : 
\begin_inset Newline newline
\end_inset


\begin_inset Formula ${\textstyle \sum\vec{F}=m.\vec{a}}$
\end_inset


\begin_inset Newline newline
\end_inset

Ici les deux forces que nous considérons sont le vent et la vitesse 
\begin_inset Formula $v{}_{0}$
\end_inset

.
\end_layout

\begin_layout Standard
\align left
3) On actualise la position de la tortue avec sa vitesse : 
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\vec{x{}_{1}}=\vec{v}_{0}.\delta t+\vec{x}_{0}$
\end_inset

 
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\vec{x{}_{0}}$
\end_inset

 : vecteur position à l'instant 
\begin_inset Formula $t{}_{0}$
\end_inset

 
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\vec{x{}_{1}}$
\end_inset

: vecteur position à l'instant  
\begin_inset Formula $t{}_{1}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\vec{v}_{0}$
\end_inset

: vecteur vitesse à l'instant 
\begin_inset Formula $t_{0}$
\end_inset

 
\end_layout

\begin_layout Standard
\align left
4) On en déduit vitesse à l'instant 
\begin_inset Formula $t_{n+1}$
\end_inset

 : 
\begin_inset Formula $v_{1}=a_{0}.\delta t+v_{0}$
\end_inset


\begin_inset Newline newline
\end_inset

Nous devions ici choisir entre actualiser la position avant ou après avoir
 actualisé la vitesse.
 Il nous a semblé plus logique de le faire avant pour que toutes les valeurs
 à l'instant 
\begin_inset Formula $t_{1}$
\end_inset

 dépendent des valeurs à l'instant 
\begin_inset Formula $t_{0}$
\end_inset

 et pas un mélange des deux.
\end_layout

\begin_layout Standard
2.2) Les rebonds
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Pour simplifier la gestion des rebonds, nous avons considéré qu'ils pouvaient
 être modélisé de la façon suivante, lorsque la balle touche le sol, sa
 vitesse est modifiée de sorte que 
\begin_inset Formula $v_{1}=-R*v_{0}$
\end_inset

 - on considère un coefficient de rebond R positif entre 0 et 1 ne dépendant
 que du sol et modélisant l'absorption de l'énergie lors du rebond.
\begin_inset Newline newline
\end_inset

Ce revêtement de sol peut être de trois types différents : herbe, béton,
 boue.
 Les coefficient de rebond sont repartis comme ceci :
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type de sol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Coefficient de rebond
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R = 0.4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Herbe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R = 0.6
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Béton
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R = 0.95
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Coefficient de rebond en fonction du type de sol
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/Rebond.jpg
	scale 40

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Rebondissement de la tortue
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
2.3) Modélisation de l'ennemi
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

La position de l'ennemi est choisie de manière aléatoire par le programme.
 Sa position est déterminée de la manière suivante :
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/PositionEnnemi.jpg
	scale 40

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Position de l'ennemi selon x et y
\end_layout

\end_inset


\end_layout

\end_inset

Et sa taille comme cela :
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/TailleEnnemi.jpg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Taille de l'ennemi selon x et y
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Part
Création du score
\end_layout

\begin_layout Standard
Le but d'un jeu vidéo est de pouvoir se confronter à d'autres adversaires
 en comparant leurs scores.
 C'est donc pour cela que nous avons réaliser un score pour chaque lancer
 de balle.
 Le score est inversement proportionnelle à la distance minimal entre la
 balle et l'ennemi lors d'un lancer.
 Si la balle touche l'ennemi alors la partie est arrêter et le joueur gagne
 le maximum en score soit 500 plus la somme des autres scores réaliser au
 tour précedent.
 Le score final est la moyenne de touts les scores précedent.
 Ainsi chaque joueur peut comparer son score à d'autre sachant que le score
 max est 500 et il peut être atteint seulement en touchant l'ennemi au premier
 lancer.
\end_layout

\begin_layout Part
Architecture du programme
\end_layout

\begin_layout Standard
2.1) Architecture trois tiers
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Afin d'éclaircir le programme ,de le rendre plus lisible et plus facile
 de compréhension, nous avons décidé de créer une architecture pour notre
 programme.
 On utilise l'architecture trois tiers : une couche présentation, une autre
 métier et la dernière données.
 Ceci permet en effet une meilleure programmation et une plus grande modularité
 du code.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

La couche présentation est relative à toute la partie graphique du programme,
 à l'interface et à toutes les données que rentre l'utilisateur.
\begin_inset Newline newline
\end_inset

La couche métier correspond au traitement des données, calculs et logique
 de l'application (lancer une partie, arrêter le programme ect...).
 C'est l'intelligence du programme.
\begin_inset Newline newline
\end_inset

La couche données est faite pour l'enregistrement des données.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

La couche présentation et la couche données ne communiquent chacune qu'avec
 la couche métier.
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/TroisTiers.jpg
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Représentation de l'architecture Trois Tiers
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
2.2) Diagramme de classe
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Le programme n'est qu'avec des objets, c'est de la programmation orientée
 objet.
 Nous pouvons donc présenter le programme sous la forme d'un diagramme de
 classes.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.2.1) Les classes de la couche métier 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Main : entrée du programme
\begin_inset Newline newline
\end_inset

Jeu : Classe responsable de l'orchestration du jeu en lui même.
 Cette classe centralise les options du jeu (que peut modifier l'utilisateur),
 ses paramètres (difficulté via la position de l'ennemi, la taille du terrain,
 les valeurs associées au vent, à la gravité, au sol, etc.), vérifie les
 conditions de victoire et de défaite, etc.
\begin_inset Newline newline
\end_inset

Options : Classe centralisant l'ensemble des options modifiables du jeu.
\begin_inset Newline newline
\end_inset

SimulationPhy : Classe responsable de la partie simulation physique.
 Dans les jeux vidéo, on appelle cette partie le moteur physique et il est
 responsable de la façon dont se déplace et évoluent les objets dans le
 monde du jeu.
\begin_inset Newline newline
\end_inset

Objet : Classe représentant un objet du monde du jeu (en l'occurence, l'ennemi
 et la tortue).
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.2.2) Les classes de la couche présentation 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Interface : Classe responsable de la communication avec le joueur via la
 console (message et options).
 
\begin_inset Newline newline
\end_inset

Fenetre : Classe permettant l'affichage et centralisant toute la partie
 graphique liée à la librairie root.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.2.3) Les classes de la couche données
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Trace : Classe permettant d'enregistrer la position et la vitesse d'un objet
 à chaque instant de la simulation dans un fichier texte.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
2.3) Interêt de l'architecture
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Les intérêts de ce découpage et de cette architecture sont multiples.
 Le premier intérêt et la modularité et la réutilisabilité du code, le second
 est la possibilité de partager le travail.
\begin_inset Newline newline
\end_inset

Dans notre cas, les classes SimulationPhy et Objet peuvent être en théorie
 réutilisées pour n'importe quelle simulation de cinématique.
 Et le découpage des fonctions permet également de modifier simplement les
 méthodes de calcul et de simulation.
 On a utilisé ici la méthode d'Euler mais on pourrait aisément ajouter la
 méthode RK4 pour la remplacer.
 De même on pourrait simplement faire les calculs à l'aide d'une librairie
 spécialisée comme armadillo ou root.
 Ces changements ne demanderait chacun que l'ajout ou la modification d'une
 fonction.
\begin_inset Newline newline
\end_inset

Pour ce qui est de la répartition du travail, avec notre code une personne
 pourait travailler sur l'interface pendant qu'une autre travaillerait sur
 le simulateur et la troisième sur le jeu par exemple.
\begin_inset Newline newline
\end_inset

Enfin, l'architecture et le découpage propre du programme permettent de
 mettre en évidence les algorithmes du programme et ainsi de plus facilement
 voir leurs avantages et leurs défauts.
 Ils permettent également un débogage plus facile.
\end_layout

\begin_layout Part
GitHub
\end_layout

\begin_layout Standard
Afin de partager notre avancement sur le projet ou que nous soyons, nous
 avons décidé d'utiliser git et le site Github.
\end_layout

\begin_layout Standard
Git permet de versionner du code ou des documents, c'est à dire que chacun
 peut ajouter des modifications, et git permet de considérer chacune d'elle
 comme une nouvelle version du programme ou du document.
 On peut ainsi fusionner les versions quand les modifications portent sur
 la même partie du code, voir qui a fait quoi, retirer une modification
 qui s'avère mauvaise, retrouver un changement pour traquer un bug, etc.
\end_layout

\begin_layout Standard
Github est un serveur web permetant aux utilisateurs de git de centraliser
 et partager leur code.
 Ce site permet pour de petit projets de se passer de la mise en place d'un
 serveur disponible en permanence.
 Il permet aussi de difuser et partager son projet sur internet.
 L'adresse de notre projet est la suivante : 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/mboutserin/flyingTurtles.git
\end_layout

\end_inset


\end_layout

\begin_layout Part
Conclusion
\end_layout

\begin_layout Standard
Lors de ce projet nous voulions réaliser un vrai jeu avec de beau graphisme
 mais cela nécessite énormément de temps qui nous as manquer.
 On aurait voulu utliser la bibliothèque Qt qui est une ressource très largement
 utilisé dans le dévellopement de jeux vidéos ou bien de software car elle
 permet une grande modularité au niveau graphisme.
 Notre jeu s'appellant flyingTurtles, nous aurions voulu faire voler des
 tortues au lieu de lancer des balles.
\end_layout

\end_body
\end_document
